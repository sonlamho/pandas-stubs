# Stubs for pandas.core.computation.pytables (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.computation import expr, ops
from pandas.core.computation.expr import BaseExprVisitor
from typing import Any, Optional

class Scope(expr.Scope):
    queryables: Any = ...
    def __init__(
        self,
        level: Any,
        global_dict: Optional[Any] = ...,
        local_dict: Optional[Any] = ...,
        queryables: Optional[Any] = ...,
    ) -> None: ...

class Term(ops.Term):
    def __new__(
        cls,
        name: Any,
        env: Any,
        side: Optional[Any] = ...,
        encoding: Optional[Any] = ...,
    ): ...
    def __init__(
        self,
        name: Any,
        env: Any,
        side: Optional[Any] = ...,
        encoding: Optional[Any] = ...,
    ) -> None: ...
    @property
    def value(self): ...

class Constant(Term):
    def __init__(
        self,
        value: Any,
        env: Any,
        side: Optional[Any] = ...,
        encoding: Optional[Any] = ...,
    ) -> None: ...

class BinOp(ops.BinOp):
    queryables: Any = ...
    encoding: Any = ...
    filter: Any = ...
    condition: Any = ...
    def __init__(
        self, op: Any, lhs: Any, rhs: Any, queryables: Any, encoding: Any
    ) -> None: ...
    def prune(self, klass: Any): ...
    def conform(self, rhs: Any): ...
    @property
    def is_valid(self): ...
    @property
    def is_in_table(self): ...
    @property
    def kind(self): ...
    @property
    def meta(self): ...
    @property
    def metadata(self): ...
    def generate(self, v: Any): ...
    def convert_value(self, v: Any): ...
    def convert_values(self) -> None: ...

class FilterBinOp(BinOp):
    def __unicode__(self): ...
    filter: Any = ...
    def invert(self): ...
    def format(self): ...
    def evaluate(self): ...
    def generate_filter_op(self, invert: bool = ...): ...

class JointFilterBinOp(FilterBinOp):
    def format(self) -> None: ...
    def evaluate(self): ...

class ConditionBinOp(BinOp):
    def __unicode__(self): ...
    def invert(self) -> None: ...
    def format(self): ...
    condition: Any = ...
    def evaluate(self): ...

class JointConditionBinOp(ConditionBinOp):
    condition: Any = ...
    def evaluate(self): ...

class UnaryOp(ops.UnaryOp):
    def prune(self, klass: Any): ...

class ExprVisitor(BaseExprVisitor):
    const_type: Any = ...
    term_type: Any = ...
    def __init__(self, env: Any, engine: Any, parser: Any, **kwargs: Any) -> None: ...
    def visit_UnaryOp(self, node: Any, **kwargs: Any): ...
    def visit_Index(self, node: Any, **kwargs: Any): ...
    def visit_Assign(self, node: Any, **kwargs: Any): ...
    def visit_Subscript(self, node: Any, **kwargs: Any): ...
    def visit_Attribute(self, node: Any, **kwargs: Any): ...
    def translate_In(self, op: Any): ...

class Expr(expr.Expr):
    encoding: Any = ...
    condition: Any = ...
    filter: Any = ...
    terms: Any = ...
    expr: Any = ...
    env: Any = ...
    def __init__(
        self,
        where: Any,
        queryables: Optional[Any] = ...,
        encoding: Optional[Any] = ...,
        scope_level: int = ...,
    ) -> None: ...
    def __unicode__(self): ...
    def evaluate(self): ...

class TermValue:
    value: Any = ...
    converted: Any = ...
    kind: Any = ...
    def __init__(self, value: Any, converted: Any, kind: Any) -> None: ...
    def tostring(self, encoding: Any): ...

def maybe_expression(s: Any): ...
