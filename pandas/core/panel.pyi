# Stubs for pandas.core.panel (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.generic import NDFrame
from typing import Any, Optional

def panel_index(time: Any, panels: Any, names: Optional[Any] = ...): ...

class Panel(NDFrame):
    def __init__(self, data: Optional[Any] = ..., items: Optional[Any] = ..., major_axis: Optional[Any] = ..., minor_axis: Optional[Any] = ..., copy: bool = ..., dtype: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_dict(cls, data: Any, intersect: bool = ..., orient: str = ..., dtype: Optional[Any] = ...): ...
    def __getitem__(self, key: Any): ...
    def __unicode__(self): ...
    fromDict: Any = ...
    def to_sparse(self, *args: Any, **kwargs: Any) -> None: ...
    def to_excel(self, path: Any, na_rep: str = ..., engine: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def as_matrix(self): ...
    def get_value(self, *args: Any, **kwargs: Any): ...
    def set_value(self, *args: Any, **kwargs: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def conform(self, frame: Any, axis: str = ...): ...
    def head(self, n: int = ...) -> None: ...
    def tail(self, n: int = ...) -> None: ...
    def round(self, decimals: int = ..., *args: Any, **kwargs: Any): ...
    def align(self, other: Any, **kwargs: Any) -> None: ...
    def dropna(self, axis: int = ..., how: str = ..., inplace: bool = ...): ...
    def major_xs(self, key: Any): ...
    def minor_xs(self, key: Any): ...
    def xs(self, key: Any, axis: int = ...): ...
    def groupby(self, function: Any, axis: str = ...): ...
    def to_frame(self, filter_observations: bool = ...): ...
    def apply(self, func: Any, axis: str = ..., **kwargs: Any): ...
    def reindex(self, *args: Any, **kwargs: Any): ...
    def rename(self, items: Optional[Any] = ..., major_axis: Optional[Any] = ..., minor_axis: Optional[Any] = ..., **kwargs: Any): ...
    def reindex_axis(self, labels: Any, axis: int = ..., method: Optional[Any] = ..., level: Optional[Any] = ..., copy: bool = ..., limit: Optional[Any] = ..., fill_value: Any = ...): ...
    def transpose(self, *args: Any, **kwargs: Any): ...
    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ..., axis: Optional[Any] = ..., inplace: bool = ..., limit: Optional[Any] = ..., downcast: Optional[Any] = ..., **kwargs: Any): ...
    def count(self, axis: str = ...): ...
    def shift(self, periods: int = ..., freq: Optional[Any] = ..., axis: str = ...): ...
    def tshift(self, periods: int = ..., freq: Optional[Any] = ..., axis: str = ...): ...
    def join(self, other: Any, how: str = ..., lsuffix: str = ..., rsuffix: str = ...): ...
    def update(self, other: Any, join: str = ..., overwrite: bool = ..., filter_func: Optional[Any] = ..., errors: str = ...) -> None: ...
    def sort_values(self, *args: Any, **kwargs: Any) -> None: ...
