# Stubs for pandas.core.groupby.ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def generate_bins_generic(values: Any, binner: Any, closed: Any): ...

class BaseGrouper:
    axis: Any = ...
    groupings: Any = ...
    sort: Any = ...
    group_keys: Any = ...
    mutated: Any = ...
    indexer: Any = ...
    def __init__(self, axis: Any, groupings: Any, sort: bool = ..., group_keys: bool = ..., mutated: bool = ..., indexer: Optional[Any] = ...) -> None: ...
    @property
    def shape(self): ...
    def __iter__(self): ...
    @property
    def nkeys(self): ...
    def get_iterator(self, data: Any, axis: int = ...) -> None: ...
    def apply(self, f: Any, data: Any, axis: int = ...): ...
    def indices(self): ...
    @property
    def labels(self): ...
    @property
    def levels(self): ...
    @property
    def names(self): ...
    def size(self): ...
    def groups(self): ...
    def is_monotonic(self): ...
    def group_info(self): ...
    def label_info(self): ...
    def ngroups(self): ...
    @property
    def recons_labels(self): ...
    def result_index(self): ...
    def get_group_levels(self): ...
    def aggregate(self, values: Any, how: Any, axis: int = ..., min_count: int = ...): ...
    def transform(self, values: Any, how: Any, axis: int = ..., **kwargs: Any): ...
    def agg_series(self, obj: Any, func: Any): ...

class BinGrouper(BaseGrouper):
    bins: Any = ...
    binlabels: Any = ...
    mutated: Any = ...
    indexer: Any = ...
    def __init__(self, bins: Any, binlabels: Any, filter_empty: bool = ..., mutated: bool = ..., indexer: Optional[Any] = ...) -> None: ...
    def groups(self): ...
    @property
    def nkeys(self): ...
    def get_iterator(self, data: Any, axis: int = ...): ...
    def indices(self): ...
    def group_info(self): ...
    def result_index(self): ...
    @property
    def levels(self): ...
    @property
    def names(self): ...
    @property
    def groupings(self): ...
    def agg_series(self, obj: Any, func: Any): ...

class DataSplitter:
    data: Any = ...
    labels: Any = ...
    ngroups: Any = ...
    axis: Any = ...
    def __init__(self, data: Any, labels: Any, ngroups: Any, axis: int = ...) -> None: ...
    def slabels(self): ...
    def sort_idx(self): ...
    def __iter__(self) -> None: ...
    def apply(self, f: Any) -> None: ...

class SeriesSplitter(DataSplitter): ...

class FrameSplitter(DataSplitter):
    def fast_apply(self, f: Any, names: Any): ...

class NDFrameSplitter(DataSplitter):
    factory: Any = ...
    def __init__(self, data: Any, labels: Any, ngroups: Any, axis: int = ...) -> None: ...

def get_splitter(data: Any, *args: Any, **kwargs: Any): ...
