# Stubs for pandas.core.groupby.groupby (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.base import PandasObject, SelectionMixin
from typing import Any, Optional

class GroupByPlot(PandasObject):
    def __init__(self, groupby: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def __getattr__(self, name: Any): ...

class _GroupBy(PandasObject, SelectionMixin):
    level: Any = ...
    as_index: Any = ...
    keys: Any = ...
    sort: Any = ...
    group_keys: Any = ...
    squeeze: Any = ...
    observed: Any = ...
    mutated: Any = ...
    obj: Any = ...
    axis: Any = ...
    grouper: Any = ...
    exclusions: Any = ...
    def __init__(self, obj: Any, keys: Optional[Any] = ..., axis: int = ..., level: Optional[Any] = ..., grouper: Optional[Any] = ..., exclusions: Optional[Any] = ..., selection: Optional[Any] = ..., as_index: bool = ..., sort: bool = ..., group_keys: bool = ..., squeeze: bool = ..., observed: bool = ..., **kwargs: Any) -> None: ...
    def __len__(self): ...
    def __unicode__(self): ...
    @property
    def groups(self): ...
    @property
    def ngroups(self): ...
    @property
    def indices(self): ...
    def __getattr__(self, attr: Any): ...
    def pipe(self, func: Any, *args: Any, **kwargs: Any): ...
    plot: Any = ...
    def get_group(self, name: Any, obj: Optional[Any] = ...): ...
    def __iter__(self): ...
    def apply(self, func: Any, *args: Any, **kwargs: Any): ...
    def transform(self, func: Any, *args: Any, **kwargs: Any) -> None: ...

class GroupBy(_GroupBy):
    def any(self, skipna: bool = ...): ...
    def all(self, skipna: bool = ...): ...
    def count(self) -> None: ...
    def mean(self, *args: Any, **kwargs: Any): ...
    def median(self, **kwargs: Any): ...
    def std(self, ddof: int = ..., *args: Any, **kwargs: Any): ...
    def var(self, ddof: int = ..., *args: Any, **kwargs: Any): ...
    def sem(self, ddof: int = ...): ...
    def size(self): ...
    def ohlc(self): ...
    def describe(self, **kwargs: Any): ...
    def resample(self, rule: Any, *args: Any, **kwargs: Any): ...
    def rolling(self, *args: Any, **kwargs: Any): ...
    def expanding(self, *args: Any, **kwargs: Any): ...
    def pad(self, limit: Optional[Any] = ...): ...
    ffill: Any = ...
    def backfill(self, limit: Optional[Any] = ...): ...
    bfill: Any = ...
    def nth(self, n: Any, dropna: Optional[Any] = ...): ...
    def ngroup(self, ascending: bool = ...): ...
    def cumcount(self, ascending: bool = ...): ...
    def rank(self, method: str = ..., ascending: bool = ..., na_option: str = ..., pct: bool = ..., axis: int = ...): ...
    def cumprod(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def cumsum(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def cummin(self, axis: int = ..., **kwargs: Any): ...
    def cummax(self, axis: int = ..., **kwargs: Any): ...
    def shift(self, periods: int = ..., freq: Optional[Any] = ..., axis: int = ..., fill_value: Optional[Any] = ...): ...
    def pct_change(self, periods: int = ..., fill_method: str = ..., limit: Optional[Any] = ..., freq: Optional[Any] = ..., axis: int = ...): ...
    def head(self, n: int = ...): ...
    def tail(self, n: int = ...): ...

def groupby(obj: Any, by: Any, **kwds: Any): ...
