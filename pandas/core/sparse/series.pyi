# Stubs for pandas.core.sparse.series (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.series import Series
from typing import Any, Optional

class SparseSeries(Series):
    def __init__(self, data: Optional[Any] = ..., index: Optional[Any] = ..., sparse_index: Optional[Any] = ..., kind: str = ..., fill_value: Optional[Any] = ..., name: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., fastpath: bool = ...) -> None: ...
    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any): ...
    def __array_wrap__(self, result: Any, context: Optional[Any] = ...): ...
    name: Any = ...
    fill_value: Any = ...
    def __array_finalize__(self, obj: Any) -> None: ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __invert__(self): ...
    @property
    def block(self): ...
    @property
    def fill_value(self): ...
    @fill_value.setter
    def fill_value(self, v: Any) -> None: ...
    @property
    def sp_index(self): ...
    @property
    def sp_values(self): ...
    @property
    def npoints(self): ...
    @classmethod
    def from_array(cls, arr: Any, index: Optional[Any] = ..., name: Optional[Any] = ..., copy: bool = ..., fill_value: Optional[Any] = ..., fastpath: bool = ...): ...
    @property
    def kind(self): ...
    def as_sparse_array(self, kind: Optional[Any] = ..., fill_value: Optional[Any] = ..., copy: bool = ...): ...
    def __unicode__(self): ...
    def __getitem__(self, key: Any): ...
    def abs(self): ...
    def get(self, label: Any, default: Optional[Any] = ...): ...
    def get_value(self, label: Any, takeable: bool = ...): ...
    def set_value(self, label: Any, value: Any, takeable: bool = ...): ...
    def to_dense(self): ...
    @property
    def density(self): ...
    def copy(self, deep: bool = ...): ...
    def reindex(self, index: Optional[Any] = ..., method: Optional[Any] = ..., copy: bool = ..., limit: Optional[Any] = ..., **kwargs: Any): ...
    def sparse_reindex(self, new_index: Any): ...
    def cumsum(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def isna(self): ...
    isnull: Any = ...
    def notna(self): ...
    notnull: Any = ...
    def dropna(self, axis: int = ..., inplace: bool = ..., **kwargs: Any): ...
    def combine_first(self, other: Any): ...
    def to_coo(self, row_levels: Any = ..., column_levels: Any = ..., sort_labels: bool = ...): ...
    @classmethod
    def from_coo(cls, A: Any, dense_index: bool = ...): ...
