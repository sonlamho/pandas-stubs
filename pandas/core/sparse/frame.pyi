# Stubs for pandas.core.sparse.frame (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.frame import DataFrame
from typing import Any, Optional

class SparseDataFrame(DataFrame):
    def __init__(self, data: Optional[Any] = ..., index: Optional[Any] = ..., columns: Optional[Any] = ..., default_kind: Optional[Any] = ..., default_fill_value: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ...) -> None: ...
    def to_coo(self): ...
    def __array_wrap__(self, result: Any): ...
    def to_dense(self): ...
    def astype(self, dtype: Any): ...
    def copy(self, deep: bool = ...): ...
    @property
    def default_fill_value(self): ...
    @property
    def default_kind(self): ...
    @property
    def density(self): ...
    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ..., axis: int = ..., inplace: bool = ..., limit: Optional[Any] = ..., downcast: Optional[Any] = ...): ...
    def get_value(self, index: Any, col: Any, takeable: bool = ...): ...
    def set_value(self, index: Any, col: Any, value: Any, takeable: bool = ...): ...
    def xs(self, key: Any, axis: int = ..., copy: bool = ...): ...
    def transpose(self, *args: Any, **kwargs: Any): ...
    T: Any = ...
    def count(self, axis: int = ..., **kwds: Any): ...
    def cumsum(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def isna(self): ...
    isnull: Any = ...
    def notna(self): ...
    notnull: Any = ...
    def apply(self, func: Any, axis: int = ..., broadcast: Optional[Any] = ..., reduce: Optional[Any] = ..., result_type: Optional[Any] = ...): ...
    def applymap(self, func: Any): ...

def to_manager(sdf: Any, columns: Any, index: Any): ...
def stack_sparse_frame(frame: Any): ...
def homogenize(series_dict: Any): ...
