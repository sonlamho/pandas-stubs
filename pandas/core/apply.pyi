# Stubs for pandas.core.apply (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def frame_apply(obj: Any, func: Any, axis: int = ..., broadcast: Optional[Any] = ..., raw: bool = ..., reduce: Optional[Any] = ..., result_type: Optional[Any] = ..., ignore_failures: bool = ..., args: Optional[Any] = ..., kwds: Optional[Any] = ...): ...

class FrameApply:
    obj: Any = ...
    raw: Any = ...
    ignore_failures: Any = ...
    args: Any = ...
    kwds: Any = ...
    result_type: Any = ...
    f: Any = ...
    result: Any = ...
    res_index: Any = ...
    res_columns: Any = ...
    def __init__(self, obj: Any, func: Any, broadcast: Any, raw: Any, reduce: Any, result_type: Any, ignore_failures: Any, args: Any, kwds: Any) -> None: ...
    @property
    def columns(self): ...
    @property
    def index(self): ...
    def values(self): ...
    def dtypes(self): ...
    @property
    def agg_axis(self): ...
    def get_result(self): ...
    def apply_empty_result(self): ...
    def apply_raw(self): ...
    def apply_broadcast(self, target: Any): ...
    def apply_standard(self): ...
    results: Any = ...
    def apply_series_generator(self) -> None: ...
    def wrap_results(self): ...

class FrameRowApply(FrameApply):
    axis: int = ...
    def apply_broadcast(self): ...
    @property
    def series_generator(self): ...
    @property
    def result_index(self): ...
    @property
    def result_columns(self): ...
    def wrap_results_for_axis(self): ...

class FrameColumnApply(FrameApply):
    axis: int = ...
    def apply_broadcast(self): ...
    @property
    def series_generator(self): ...
    @property
    def result_index(self): ...
    @property
    def result_columns(self): ...
    def wrap_results_for_axis(self): ...
    def infer_to_same_shape(self): ...
