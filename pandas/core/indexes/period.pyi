# Stubs for pandas.core.indexes.period (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin, DatetimelikeDelegateMixin
from pandas.core.indexes.datetimes import Int64Index
from typing import Any, Optional

class PeriodDelegateMixin(DatetimelikeDelegateMixin): ...

class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):
    def __new__(cls, data: Optional[Any] = ..., ordinal: Optional[Any] = ..., freq: Optional[Any] = ..., start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., tz: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ..., **fields: Any): ...
    @property
    def values(self): ...
    @property
    def freq(self): ...
    @freq.setter
    def freq(self, value: Any) -> None: ...
    def __contains__(self, key: Any): ...
    contains: Any = ...
    def __array__(self, dtype: Optional[Any] = ...): ...
    def __array_wrap__(self, result: Any, context: Optional[Any] = ...): ...
    def asof_locs(self, where: Any, mask: Any): ...
    def astype(self, dtype: Any, copy: bool = ..., how: str = ...): ...
    def searchsorted(self, value: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    @property
    def is_all_dates(self): ...
    @property
    def is_full(self): ...
    @property
    def inferred_type(self): ...
    def get_value(self, series: Any, key: Any): ...
    def get_indexer(self, target: Any, method: Optional[Any] = ..., limit: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def unique(self, level: Optional[Any] = ...): ...
    def get_loc(self, key: Any, method: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def insert(self, loc: Any, item: Any): ...
    def join(self, other: Any, how: str = ..., level: Optional[Any] = ..., return_indexers: bool = ..., sort: bool = ...): ...
    @property
    def flags(self): ...
    def item(self): ...
    @property
    def data(self): ...
    @property
    def base(self): ...

def period_range(start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., freq: Optional[Any] = ..., name: Optional[Any] = ...): ...
