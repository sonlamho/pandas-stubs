# Stubs for pandas.core.indexes.datetimelike (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import numpy as np
from pandas.core.accessor import PandasDelegate
from pandas.core.arrays import ExtensionOpsMixin
from typing import Any, Optional

def ea_passthrough(array_method: Any): ...

class DatetimeIndexOpsMixin(ExtensionOpsMixin):
    inferred_freq: Any = ...
    hasnans: Any = ...
    resolution: Any = ...
    __iter__: Any = ...
    @property
    def freq(self): ...
    @freq.setter
    def freq(self, value: Any) -> None: ...
    @property
    def freqstr(self): ...
    def unique(self, level: Optional[Any] = ...): ...
    @property
    def values(self) -> np.ndarray: ...
    @property
    def asi8(self): ...
    def equals(self, other: Any): ...
    def __contains__(self, key: Any): ...
    contains: Any = ...
    def map(self, f: Any): ...
    def sort_values(self, return_indexer: bool = ..., ascending: bool = ...): ...
    def take(self, indices: Any, axis: int = ..., allow_fill: bool = ..., fill_value: Optional[Any] = ..., **kwargs: Any): ...
    @property
    def asobject(self): ...
    def tolist(self): ...
    def min(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def argmin(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def max(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def argmax(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def isin(self, values: Any): ...
    def repeat(self, repeats: Any, axis: Optional[Any] = ...): ...
    def where(self, cond: Any, other: Optional[Any] = ...): ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    def shift(self, periods: Any, freq: Optional[Any] = ...): ...

def wrap_arithmetic_op(self, other: Any, result: Any): ...
def maybe_unwrap_index(obj: Any): ...

class DatetimelikeDelegateMixin(PandasDelegate):
    name: Any = ...
