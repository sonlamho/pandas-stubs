# Stubs for pandas.core.indexes.datetimes (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin, DatetimelikeDelegateMixin
from pandas.core.indexes.numeric import Int64Index
from typing import Any, Optional

class DatetimeDelegateMixin(DatetimelikeDelegateMixin): ...

class DatetimeIndex(DatetimeIndexOpsMixin, Int64Index, DatetimeDelegateMixin):
    timetuple: Any = ...
    def __new__(cls, data: Optional[Any] = ..., freq: Optional[Any] = ..., start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., tz: Optional[Any] = ..., normalize: bool = ..., closed: Optional[Any] = ..., ambiguous: str = ..., dayfirst: bool = ..., yearfirst: bool = ..., dtype: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ..., verify_integrity: Optional[Any] = ...): ...
    def __array__(self, dtype: Optional[Any] = ...): ...
    @property
    def dtype(self): ...
    @property
    def tz(self): ...
    @tz.setter
    def tz(self, value: Any) -> None: ...
    tzinfo: Any = ...
    def __reduce__(self): ...
    def union(self, other: Any): ...
    def union_many(self, others: Any): ...
    def intersection(self, other: Any, sort: bool = ...): ...
    def to_series(self, keep_tz: Optional[Any] = ..., index: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def snap(self, freq: str = ...): ...
    def join(self, other: Any, how: str = ..., level: Optional[Any] = ..., return_indexers: bool = ..., sort: bool = ...): ...
    def get_value(self, series: Any, key: Any): ...
    def get_value_maybe_box(self, series: Any, key: Any): ...
    def get_loc(self, key: Any, method: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def slice_indexer(self, start: Optional[Any] = ..., end: Optional[Any] = ..., step: Optional[Any] = ..., kind: Optional[Any] = ...): ...
    is_normalized: Any = ...
    strftime: Any = ...
    @property
    def offset(self): ...
    freq: Any = ...
    @offset.setter
    def offset(self, value: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def searchsorted(self, value: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    def is_type_compatible(self, typ: Any): ...
    @property
    def inferred_type(self): ...
    @property
    def is_all_dates(self): ...
    def insert(self, loc: Any, item: Any): ...
    def delete(self, loc: Any): ...
    def indexer_at_time(self, time: Any, asof: bool = ...): ...
    def indexer_between_time(self, start_time: Any, end_time: Any, include_start: bool = ..., include_end: bool = ...): ...

def date_range(start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., freq: Optional[Any] = ..., tz: Optional[Any] = ..., normalize: bool = ..., name: Optional[Any] = ..., closed: Optional[Any] = ..., **kwargs: Any): ...
def bdate_range(start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., freq: str = ..., tz: Optional[Any] = ..., normalize: bool = ..., name: Optional[Any] = ..., weekmask: Optional[Any] = ..., holidays: Optional[Any] = ..., closed: Optional[Any] = ..., **kwargs: Any): ...
def cdate_range(start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., freq: str = ..., tz: Optional[Any] = ..., normalize: bool = ..., name: Optional[Any] = ..., closed: Optional[Any] = ..., **kwargs: Any): ...
