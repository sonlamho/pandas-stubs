# Stubs for pandas.core.base (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from pandas.core.accessor import DirNamesMixin
from numpy import ndarray
from typing import Any, Optional

class StringMixin:
    def __unicode__(self) -> None: ...
    def __bytes__(self): ...

class PandasObject(StringMixin, DirNamesMixin):
    def __unicode__(self): ...
    def __sizeof__(self): ...

class NoNewAttributesMixin:
    def __setattr__(self, key: Any, value: Any) -> None: ...

class GroupByError(Exception): ...
class DataError(GroupByError): ...
class SpecificationError(GroupByError): ...

class SelectionMixin:
    def ndim(self): ...
    def __getitem__(self, key: Any): ...
    def aggregate(self, func: Any, *args: Any, **kwargs: Any) -> None: ...
    agg: Any = ...

class IndexOpsMixin:
    __array_priority__: int = ...
    def transpose(self, *args: Any, **kwargs: Any): ...
    T: Any = ...
    @property
    def shape(self): ...
    @property
    def ndim(self): ...
    def item(self): ...
    @property
    def data(self): ...
    @property
    def itemsize(self): ...
    @property
    def nbytes(self): ...
    @property
    def strides(self): ...
    @property
    def size(self): ...
    @property
    def flags(self): ...
    @property
    def base(self): ...
    @property
    def array(self) -> ndarray: ...
    def to_numpy(self, dtype: Optional[Any] = ..., copy: bool = ...): ...
    @property
    def empty(self): ...
    def max(self, axis: Optional[Any] = ..., skipna: bool = ...): ...
    def argmax(self, axis: Optional[Any] = ..., skipna: bool = ...): ...
    def min(self, axis: Optional[Any] = ..., skipna: bool = ...): ...
    def argmin(self, axis: Optional[Any] = ..., skipna: bool = ...): ...
    def tolist(self): ...
    to_list: Any = ...
    def __iter__(self): ...
    def hasnans(self): ...
    def value_counts(self, normalize: bool = ..., sort: bool = ..., ascending: bool = ..., bins: Optional[Any] = ..., dropna: bool = ...): ...
    def unique(self): ...
    def nunique(self, dropna: bool = ...): ...
    @property
    def is_unique(self): ...
    @property
    def is_monotonic(self): ...
    is_monotonic_increasing: Any = ...
    @property
    def is_monotonic_decreasing(self): ...
    #def memory_usage(self, deep: bool = ...): ...
    def factorize(self, sort: bool = ..., na_sentinel: int = ...): ...
    def searchsorted(self, value: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    def drop_duplicates(self, keep: str = ..., inplace: bool = ...): ...
    def duplicated(self, keep: str = ...): ...
