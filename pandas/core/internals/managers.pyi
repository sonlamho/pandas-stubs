# Stubs for pandas.core.internals.managers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .blocks import Block, CategoricalBlock, DatetimeTZBlock, ExtensionBlock, ObjectValuesExtensionBlock, _extend_blocks, _merge_blocks, _safe_reshape, get_block_type, make_block
from .concat import combine_concat_plans, concatenate_join_units, get_mgr_concatenation_plan, is_uniform_join_units
from pandas.core.base import PandasObject
from typing import Any, Optional

class BlockManager(PandasObject):
    axes: Any = ...
    blocks: Any = ...
    def __init__(self, blocks: Any, axes: Any, do_integrity_check: bool = ...) -> None: ...
    def make_empty(self, axes: Optional[Any] = ...): ...
    def __nonzero__(self): ...
    __bool__: Any = ...
    @property
    def shape(self): ...
    @property
    def ndim(self): ...
    def set_axis(self, axis: Any, new_labels: Any) -> None: ...
    def rename_axis(self, mapper: Any, axis: Any, copy: bool = ..., level: Optional[Any] = ...): ...
    @property
    def items(self): ...
    def get_dtype_counts(self): ...
    def get_ftype_counts(self): ...
    def get_dtypes(self): ...
    def get_ftypes(self): ...
    def __len__(self): ...
    def __unicode__(self): ...
    def apply(self, f: Any, axes: Optional[Any] = ..., filter: Optional[Any] = ..., do_integrity_check: bool = ..., consolidate: bool = ..., **kwargs: Any): ...
    def quantile(self, axis: int = ..., consolidate: bool = ..., transposed: bool = ..., interpolation: str = ..., qs: Optional[Any] = ..., numeric_only: Optional[Any] = ...): ...
    def isna(self, func: Any, **kwargs: Any): ...
    def where(self, **kwargs: Any): ...
    def setitem(self, **kwargs: Any): ...
    def putmask(self, **kwargs: Any): ...
    def diff(self, **kwargs: Any): ...
    def interpolate(self, **kwargs: Any): ...
    def shift(self, **kwargs: Any): ...
    def fillna(self, **kwargs: Any): ...
    def downcast(self, **kwargs: Any): ...
    def astype(self, dtype: Any, **kwargs: Any): ...
    def convert(self, **kwargs: Any): ...
    def replace(self, **kwargs: Any): ...
    def replace_list(self, src_list: Any, dest_list: Any, inplace: bool = ..., regex: bool = ...): ...
    def reshape_nd(self, axes: Any, **kwargs: Any): ...
    def is_consolidated(self): ...
    @property
    def is_mixed_type(self): ...
    @property
    def is_numeric_mixed_type(self): ...
    @property
    def is_datelike_mixed_type(self): ...
    @property
    def any_extension_types(self): ...
    @property
    def is_view(self): ...
    def get_bool_data(self, copy: bool = ...): ...
    def get_numeric_data(self, copy: bool = ...): ...
    def combine(self, blocks: Any, copy: bool = ...): ...
    def get_slice(self, slobj: Any, axis: int = ...): ...
    def __contains__(self, item: Any): ...
    @property
    def nblocks(self): ...
    def copy(self, deep: bool = ...): ...
    def as_array(self, transpose: bool = ..., items: Optional[Any] = ...): ...
    def to_dict(self, copy: bool = ...): ...
    def xs(self, key: Any, axis: int = ..., copy: bool = ..., takeable: bool = ...): ...
    def fast_xs(self, loc: Any): ...
    def consolidate(self): ...
    def get(self, item: Any, fastpath: bool = ...): ...
    def iget(self, i: Any, fastpath: bool = ...): ...
    def delete(self, item: Any) -> None: ...
    def set(self, item: Any, value: Any): ...
    def insert(self, loc: Any, item: Any, value: Any, allow_duplicates: bool = ...) -> None: ...
    def reindex_axis(self, new_index: Any, axis: Any, method: Optional[Any] = ..., limit: Optional[Any] = ..., fill_value: Optional[Any] = ..., copy: bool = ...): ...
    def reindex_indexer(self, new_axis: Any, indexer: Any, axis: Any, fill_value: Optional[Any] = ..., allow_dups: bool = ..., copy: bool = ...): ...
    def take(self, indexer: Any, axis: int = ..., verify: bool = ..., convert: bool = ...): ...
    def merge(self, other: Any, lsuffix: str = ..., rsuffix: str = ...): ...
    def equals(self, other: Any): ...
    def unstack(self, unstacker_func: Any, fill_value: Any): ...

class SingleBlockManager(BlockManager):
    ndim: int = ...
    axes: Any = ...
    blocks: Any = ...
    def __init__(self, block: Any, axis: Any, do_integrity_check: bool = ..., fastpath: bool = ...) -> None: ...
    def get_slice(self, slobj: Any, axis: int = ...): ...
    @property
    def index(self): ...
    def convert(self, **kwargs: Any): ...
    @property
    def dtype(self): ...
    @property
    def array_dtype(self): ...
    @property
    def ftype(self): ...
    def get_dtype_counts(self): ...
    def get_ftype_counts(self): ...
    def get_dtypes(self): ...
    def get_ftypes(self): ...
    def external_values(self): ...
    def internal_values(self): ...
    def formatting_values(self): ...
    def get_values(self): ...
    @property
    def asobject(self): ...
    def is_consolidated(self): ...
    def delete(self, item: Any) -> None: ...
    def fast_xs(self, loc: Any): ...
    def concat(self, to_concat: Any, new_axis: Any): ...

def create_block_manager_from_blocks(blocks: Any, axes: Any): ...
def create_block_manager_from_arrays(arrays: Any, names: Any, axes: Any): ...
def construction_error(tot_items: Any, block_shape: Any, axes: Any, e: Optional[Any] = ...) -> None: ...
def form_blocks(arrays: Any, names: Any, axes: Any): ...
def items_overlap_with_suffix(left: Any, lsuffix: Any, right: Any, rsuffix: Any): ...
def concatenate_block_managers(mgrs_indexers: Any, axes: Any, concat_axis: Any, copy: Any): ...
