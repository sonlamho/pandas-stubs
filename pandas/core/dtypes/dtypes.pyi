# Stubs for pandas.core.dtypes.dtypes (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import ExtensionDtype, _DtypeOpsMixin
from .inference import is_list_like
from typing import Any, Optional

def register_extension_dtype(cls): ...

class Registry:
    dtypes: Any = ...
    def __init__(self) -> None: ...
    def register(self, dtype: Any) -> None: ...
    def find(self, dtype: Any): ...

registry: Any

class PandasExtensionDtype(_DtypeOpsMixin):
    type: Any = ...
    subdtype: Any = ...
    kind: Any = ...
    str: Any = ...
    num: int = ...
    shape: Any = ...
    itemsize: int = ...
    base: Any = ...
    isbuiltin: int = ...
    isnative: int = ...
    def __unicode__(self): ...
    def __bytes__(self): ...
    def __hash__(self) -> None: ...
    @classmethod
    def reset_cache(cls) -> None: ...

class CategoricalDtypeType(type): ...

class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
    name: str = ...
    type: Any = ...
    kind: str = ...
    str: str = ...
    base: Any = ...
    def __init__(
        self, categories: Optional[Any] = ..., ordered: Optional[Any] = ...
    ) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other: Any): ...
    @classmethod
    def construct_array_type(cls): ...
    @classmethod
    def construct_from_string(cls, string: Any): ...
    @staticmethod
    def validate_ordered(ordered: Any) -> None: ...
    @staticmethod
    def validate_categories(categories: Any, fastpath: bool = ...): ...
    def update_dtype(self, dtype: Any): ...
    @property
    def categories(self): ...
    @property
    def ordered(self): ...

class DatetimeTZDtype(PandasExtensionDtype, ExtensionDtype):
    type: Any = ...
    kind: str = ...
    str: str = ...
    num: int = ...
    base: Any = ...
    na_value: Any = ...
    def __init__(self, unit: str = ..., tz: Optional[Any] = ...) -> None: ...
    @property
    def unit(self): ...
    @property
    def tz(self): ...
    @classmethod
    def construct_array_type(cls): ...
    @classmethod
    def construct_from_string(cls, string: Any): ...
    def __unicode__(self): ...
    @property
    def name(self): ...
    def __hash__(self): ...
    def __eq__(self, other: Any): ...

class PeriodDtype(ExtensionDtype, PandasExtensionDtype):
    type: Any = ...
    kind: str = ...
    str: str = ...
    base: Any = ...
    num: int = ...
    def __new__(cls, freq: Optional[Any] = ...): ...
    @classmethod
    def construct_from_string(cls, string: Any): ...
    def __unicode__(self): ...
    @property
    def name(self): ...
    @property
    def na_value(self): ...
    def __hash__(self): ...
    def __eq__(self, other: Any): ...
    @classmethod
    def is_dtype(cls, dtype: Any): ...
    @classmethod
    def construct_array_type(cls): ...

class IntervalDtype(PandasExtensionDtype, ExtensionDtype):
    name: str = ...
    kind: Any = ...
    str: str = ...
    base: Any = ...
    num: int = ...
    def __new__(cls, subtype: Optional[Any] = ...): ...
    @classmethod
    def construct_array_type(cls): ...
    @classmethod
    def construct_from_string(cls, string: Any): ...
    @property
    def type(self): ...
    def __unicode__(self): ...
    def __hash__(self): ...
    def __eq__(self, other: Any): ...
    @classmethod
    def is_dtype(cls, dtype: Any): ...
